// BoatControllerSemiauto.h

#ifndef _BOATCONTROLLERSEMIAUTO_h
#define _BOATCONTROLLERSEMIAUTO_h

#if defined(ARDUINO) && ARDUINO >= 100
	#include "arduino.h"
#else
	#include "WProgram.h"
#endif
#include "BoatControllerInterface.h"
#include "BoatControllerHeading.h"
#include "LineFit.h"
#include "WayPoints.h"
#include "PID.h"
#include "ElapsedTime.h"
#include "TimeoutTimer.h"

class BoatControllerSemiauto : public BoatControllerInterface{
public:
	enum BoatSemiAutoControllerStates {
		BoatCtrlMode_SemiAuto_Init = 1,
		BoatCtrlMode_SemiAuto_Running = 2,
		BoatCtrlMode_SemiAuto_Idle = 3,
		BoatCtrlMode_SemiAuto_TurnLeft = 4,
		BoatCtrlMode_SemiAuto_TurnRight = 5,
		BoatCtrlMode_SemiAuto_Homming = 6
	};

	BoatControllerSemiauto(const String& name);

	/*
	*/
	int getControllerState() const;

	/*
	This method can be called after initialization.
	If the controller is finished, 
		idle control signals are generated.
	If the controller is not initialized, 
		it does nothing.
	If the controller is initialized, 
		it generate the control signal such the boat follows the way-points
	*/
	void control();

	/*
	Initial way-points are initialized.
	*/
	bool isInitialized() const;

	/*
	*/
	bool isFinished() const;

	/*
	Initialize straight way-points from the trajectories generated by user's manual control.
	*/
	void initialize();

	/*

	*/
	void reset();

	/*
	This method can be called anytime.
	If the controller is initialized(running), 
		future way-points will be discarded and then start moving to the 'point'.
	If the controller is not initialized or finished, 
		controller is reset-ed and forced to be initialized, then start moving to the 'point'.
	*/
	void goToHereNow(const Point2D& point);

	/*
	This method can be called while the controller is initialized and not finished.
	If it is finished or not initialized, it does nothing.
	*/
	void turnLeft(const double& D);

	/*
	This method can be called while the controller is initialized and not finished.
	If it is finished or not initialized, it does nothing.
	*/
	void turnRight(const double& D);

	/*
	*/
	void goHome();

	/*
	*/
	void setLookAheadDistance(const double& look_ahead_dist);
	
	inline PID* getPIDRudder(){
		return &_pid_rudder;
	}
protected:
	void logWayPoints();
protected:
	BoatControllerHeading _heading_controller;
	LineFit<20> _line_fitting;
	WayPoints _way_points;
	bool _initialized;
	bool _finished;
	PID _pid_rudder;
	ElapsedTimeMilli _elapsed_time;
	BoatSemiAutoControllerStates _controller_state;
	size_t _target_wp_idx;//internal parameter for LeftTurn/RightTurn
	Point2D _last_fitting_data;
	TimerTimeoutMilli _timeout_log_wps;
};
#endif

